// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

model Article {
  id          Int              @id @default(autoincrement())
  Authors     ArticleAuthors[]
  title       String
  description String
  category    ArticleCategory
  thumbnail   String?
  body        String

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Comments    ArticleComment[]
}

model ArticleAuthors {
  articleId Int
  authorId  String
  article   Article @relation(fields: [articleId], references: [id])
  author    Player  @relation(fields: [authorId], references: [id])

  @@id([articleId, authorId])
}

model ArticleComment {
  id        String   @id @default(cuid())
  articleId Int
  playerId  String
  createdAt DateTime @default(now())
  body      String
  article   Article  @relation(fields: [articleId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  state         UserState @default(active)
  role          Role?
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  identities    Player[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Clan {
  id          String   @id @default(cuid())
  name        String
  description String
  ownerId     String
  owner       Player   @relation("owner", fields: [ownerId], references: [id])
  members     Player[] @relation("member")
}

model Player {
  id            String           @id @default(cuid())
  name          String
  secret        Boolean          @default(false)
  userId        String
  /// [PrismaPreferences]
  preferences   Json?
  achievements  Achievement[]
  Posts         ArticleAuthors[]
  Comments      ArticleComment[]
  ChatMessage   ChatMessage[]
  ownedClans    Clan[]           @relation("owner")
  MMR           MMR[]
  Notes         Notes[]
  user          User             @relation(fields: [userId], references: [id])
  MatchToPlayer MatchToPlayer[]
  clans         Clan[]           @relation("member")
}

model WWMap {
  id               String   @id @default(cuid())
  name             String
  /// [PrismaTiles]
  tiles            Json
  /// [PrismaUnits]
  predeployedUnits Json
  numberOfPlayers  Int
  createdAt        DateTime @default(now())
  matches          Match[]

  @@map("Map")
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  authorId  String
  matchId   String?  @map("matchId")
  author    Player   @relation(fields: [authorId], references: [id])
  match     Match?   @relation(fields: [matchId], references: [id])
}

model Notes {
  content  String
  public   Boolean @default(false)
  playerId String
  matchId  String
  Match    Match   @relation(fields: [matchId], references: [id])
  Player   Player  @relation(fields: [playerId], references: [id])

  @@id([playerId, matchId])
}

model MMR {
  leagueType LeagueType
  playerId   String
  mmr        Int        @default(800)
  topMmr     Int        @default(800)
  Player     Player     @relation(fields: [playerId], references: [id])

  @@id([leagueType, playerId])
}

model Match {
  id            String          @id @default(cuid())
  leagueType    LeagueType
  /// [PrismaMatchRules]
  rules         Json
  status        MatchStatus
  mapId         String
  /// [PrismaPlayerState]
  playerState   Json
  chatIsPublic  Boolean         @default(false)
  createdAt     DateTime        @default(now())
  chatMessages  ChatMessage[]
  Event         Event[]
  Notes         Notes[]
  MatchToPlayer MatchToPlayer[]
  map           WWMap           @relation(fields: [mapId], references: [id])

  @@map("match")
}

model Event {
  matchId   String
  /// the index describes the order of events. they are not universally unique, but unique per match.
  index     Int      @default(autoincrement()) @map("eventIndex")
  /// [PrismaEvent]
  content   Json
  createdAt DateTime @default(now())
  match     Match    @relation(fields: [matchId], references: [id])

  @@id([matchId, index])
}

model MatchToPlayer {
  A      String
  B      String
  match  Match  @relation(fields: [A], references: [id], onDelete: Cascade)
  Player Player @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_MatchToPlayer_AB_unique")
  @@index([B], map: "_MatchToPlayer_B_index")
  @@map("_MatchToPlayer")
}

enum ArticleType {
  news
  guide
}

enum ArticleCategory {
  basics
  advance
  site
  patch
  events
  news
  maintenance
  other
}

enum UserState {
  active
  disabled
  banned
}

enum Role {
  admin
  moderator
}

enum CO {
  adder
}

enum Unit {
  pipeRunner
}

enum Game {
  advanceDatingByWeb
}

enum Achievement {
  fieldTrainingComplete
  winStreak
  underdog
  handicap
  lightningStrike
  destroyer
  fixer
  goldRush
  champion
  grizzledYet
}

enum MatchStatus {
  setup
  playing
  finished
}

enum LeagueType {
  standard
  fog
  highFunds
  dualLeague
  standardTeams
  broken
}
